{"version":3,"sources":["SelectOptions.js","App.js","serviceWorker.js","index.js"],"names":["options","value","label","heic2any","require","FileSaver","App","props","resetFileErrorState","setState","isFileTypeError","clearUpload","document","getElementById","convertFile","blob","fileType","state","selectedFileType","resetPage","isLoading","toType","quality","then","conversionResult","saveAs","catch","error","console","log","uploadHandler","event","target","files","type","uploadedBlob","convertHandler","Blob","window","alert","selectHandler","bind","loader","this","fileError","className","id","name","onChange","onClick","defaultValue","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f6e621e7.chunk.js","sourcesContent":["// Options for react-select menu\nexport const options = [\n  {value: 'jpg', label: \"JPEG\"},\n  {value: 'png', label: \"PNG\"}\n]\n","import React from 'react';\nimport './App.css';\nimport Select from 'react-select';\nimport { options } from './SelectOptions.js'\nconst heic2any = require(\"heic2any\");\nconst FileSaver = require('file-saver');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      uploadedBlob: '',\n      isLoading: false, // Display loader when converting\n      isFileTypeError: false,\n      selectedFileType: options[0]\n    }\n    this.uploadHandler = this.uploadHandler.bind(this);\n    this.convertHandler = this.convertHandler.bind(this);\n    this.selectHandler = this.selectHandler.bind(this);\n  }\n\n  // Remove file error css\n  resetFileErrorState = () => {\n    this.setState({isFileTypeError: false});\n  }\n\n  // Clear input element\n  clearUpload = () => {\n    document.getElementById(\"upload\").value = \"\";\n  }\n\n  convertFile = (blob) => {\n    const fileType = this.state.selectedFileType.value;\n\n    // Clear state and form\n    const resetPage = () => {\n      this.setState({ isLoading: false });\n      this.clearUpload();\n    }\n\n    // Convert to desired file type\n    switch (fileType) {\n      case \"jpg\":\n        heic2any({\n          blob,\n          toType: \"image/jpeg\",\n          quality: 0.9\n        })\n        .then((conversionResult) => {\n          FileSaver.saveAs(conversionResult, 'conversion.jpg');\n          resetPage();\n        })\n        .catch(error => console.log(error));\n        break;\n      case \"png\":\n        heic2any({\n          blob,\n          toType: \"image/png\",\n        })\n        .then((conversionResult) => {\n          FileSaver.saveAs(conversionResult, 'conversion.png');\n          resetPage();\n        })\n        .catch(error => console.log(error));\n        break;\n      default:\n        break;\n    }\n  }\n\n  uploadHandler = (event) => {\n    // Remove file error if it's there\n    if (this.state.isFileTypeError) {\n      this.resetFileErrorState();\n    }\n\n    // Check if file is of heic type\n    if (event.target.files[0].type !== \"image/heic\") {\n      this.setState({\n        isLoading: false,\n        isFileTypeError: true\n      });\n      // Clear upload input\n      this.clearUpload();\n      return;\n    }\n\n    this.setState({ uploadedBlob: event.target.files });\n  }\n\n  // Submit button\n  convertHandler = () => {\n    const uploadedBlob = this.state.uploadedBlob;\n    // Don't submit if there's no file\n    if (!this.state.uploadedBlob) {\n      window.alert(\"Please select a HEIC file.\");\n      return;\n    }\n\n    // Loader\n    this.setState({ isLoading: true });\n\n    // Convert file stream to blob and convert\n    const blob = new Blob(uploadedBlob);\n    this.convertFile(blob);\n  }\n\n  selectHandler = (event) => {\n    console.log(event);\n    this.setState({ selectedFileType: event });\n  }\n\n  render() {\n    const loader = this.state.isLoading ? \"loader\" : \"\";\n    const fileError = this.state.isFileTypeError ? \"file-error\" : \"dont-show-error\";\n    return (\n      <div className=\"page\">\n        <div className=\"header-container\">\n          <div className=\"header\">HEIC Converter</div>\n        </div>\n        <div className=\"box\">\n          <div className=\"box-header\">Upload File</div>\n          <input id=\"upload\" type=\"file\" name=\"file\" onChange={this.uploadHandler} className=\"upload\" />\n          <button onClick={this.convertHandler} className=\"submit-button\">Convert</button>\n          <div>Select an output format:</div>\n          <Select options={options} defaultValue={options[0]} onChange={this.selectHandler} className={\"select\"} />\n          <div className={loader}></div>\n          <div className={fileError}>Error: wrong file type</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}